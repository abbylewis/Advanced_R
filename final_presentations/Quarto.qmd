---
title: "Overview of Quarto"
author: "Tyler Smith"
format: 
  html: default
  pdf: default
editor: visual
---

## **Current Research:**

![](https://github.com/tyler-26-smith/Advanced_R/blob/master/bmp_station.jpg?raw=true){fig-align="center" width="200"}

**Title:** Assessment and Monitoring of Virginia Water Quality Best Management Practices

**Goals & Scope:**

-   Construct a mobile water quality monitoring station

-   Telecommunication of data collected at each station

**Equipment:**

-   CR1000 & CR1000x

-   Cell210 4g LTE Cellular Module

-   RF401A: 900 MHz Spread-Spectrum Radio

-   YSI (Exo 3 and 2)

-   CS655 Soil Moisture Probe

-   spectro::lyser V3 nitrogen UV-Vis probe (SPV3)

**Current Issue:**

-   Integrating SPV3 (modbus serial communication) into telecommunication network (pakbus)\`\`\`\

    -   Physical limitations of CR1000(x) prevent RF radio and cellular module from being on the same serial port

    -   Limitations of modbus output format over HTP / IP communication

**Potential Solution:**

-   Set up File Transfer Protocol (FTP) between SPV3 and CR1000(x) to sidestep communication limitations between modbus and pakbus

    -   Retrieve data pushed to data retrieval site

    -   Develop R-script to clean and analyze raw data from FTP then embed the outputs into final website for viewing

# **Project Motivation:**

Utilizing R for analysis of data and export results to html format that can be embedded in a website. Leading to an investigation into Quarto as a potential solution to this.

# **General:**

### **What is Quarto?**

-   Opensource platform to easily publish and convey scientific data and accompanying code
    -   Equivalent to a more robust version of R-markdown

### **Benefits Some Benefits of Quarto**

-   **Compatible with multiple languages through integration of respective engines**

    -   *R (knitr)*

    -   Python (Jupyter)

    -   JavaScript (Observable)

-   **Numerous output types**

    -   *html*

    -   .pdf

    -   .docx

    -   .ppxt

    -   And other formats supported by other languages (ie .ipynb)

-   **Integrate code from different languages/ projects into a single output document/format that is easily interpreted**

    -   Useful for large projects/tutorials using multiple platforms

    -   Easy to follow workflows

-   **Easily publish data**

    -   Directly in R-studio through quarto

    -   *Export html to git or directly embed into a site*

For more info: <https://quarto.org>

## Setup:

1.  Download [Quarto Installer](https://quarto.org/docs/get-started/)
2.  Open R studio
    1.  File
        1.  New File
            1.  Quarto Document / Presentation

**Note:** Quarto files use a .qmd file type similar to a mark down .rmd

## Basic Elements:

1.  **Source** Document

    ![](https://github.com/tyler-26-smith/Advanced_R/blob/master/source.PNG?raw=true){width="512"}

    -   The source document is where you develop and run code. Code can then be populated into the visual document.

    -   Contains markdown and code cells similar to a markdown document

    -   Markdown code utilizes a latex format

2.  **Visual** Document

    ![](https://github.com/tyler-26-smith/Advanced_R/blob/master/visual.PNG?raw=true){width="434"}

    -   The visual document acts similar to a Google doc. Here you can edit the document as if it were any other word document software.

        -   Headings / Subheadings

        -   Text font, bold, italicizing, bullets...

        -   Inserting pictures, tables, equations, links...

        -   etc

    -   Visual document and source document are linked to one another, any changes made in one will populate in the other.

3.  **Render**

    ![](https://github.com/tyler-26-smith/Advanced_R/blob/master/render3.PNG?raw=true)

    -   Render populates the content of the Source and Visual documents into a single output document

4.  **Output Format**

    ![](https://github.com/tyler-26-smith/Advanced_R/blob/master/format.PNG?raw=true)

    -   At the top of the source or visual document there is a "format:" option here is where you specify the output of the final document.

    -   The output can be specified to a single format or multiple formats

    -   Output can be set to "Preview in viewer" in the setings (by render) to prevent documents external to R-Studio from being opened

5.  **Adding Elements (via source or visual)**

    -   Elements include:

        -   Headings

        -   List

        -   Tables

        -   Images

        -   Equations

        -   Citations

        -   Links

        -   *Code Blocks*

        -   etc.

    1.  Source:

        ![](https://github.com/tyler-26-smith/Advanced_R/blob/master/addingsource.PNG?raw=true){width="414"}

        -   Elements can be added to the final document in the source pane via a latex formatting or format via R code

    2.  Visual:

        ![](https://github.com/tyler-26-smith/Advanced_R/blob/master/addingvisual.PNG?raw=true){width="470"}

        -   Elements can be added in the visual document either with keyboard shortcuts, clicking on widgets, or typing "/" followed by the respective element

6.  **Running Code**

<!-- -->

1.  Insert R code block into visual document
2.  add code
3.  click "render" to output code to document:

**First Code Example:**

```{r}
1 + 1
```

**Note**: Within the R code block you can add functionality ("executions") to the output with commands such as "#\| echo: false", which will print only the output of the codeblock and prevent the raw source code from being printed. [Click here](https://images.datacamp.com/image/upload/v1676540721/Marketing/Blog/Quarto_Cheat_Sheet.pdf) for more examples of functions to edit output format.

**Second Code Example**:

```{r}
#| echo: false
2 * 2
```

Below is an attempt at adding code from another project:

```{r}
#install.packages("RCurl")
library(RCurl)
url <- getURL("https://github.com/tyler-26-smith/Masters_Research/blob/main/data/fp1.1.csv")
ext1.1 <- read.csv(text = url)
```

```{r}

test_func <- function(ext_df, xsecname, m_title){
  library(ggplot2)
  final_plot <- ggplot(data = ext_df, aes(x = Distance, y = Elevation)) +
    geom_line() + 
    ylim(min_elev, max_elev) +
    geom_point(data = select_func(xsecname), 
               aes(x = MEAS, y = Elev_m_pro, 
                   size = tile_dry_g, 
                   color = as.character(Name)), alpha = 0.5)+
    scale_color_manual(values = c("#1B9E77", "#D95F02", "#7570B3", "#E7298A", "#66A61E"),
                       name = "Tile ID") +
    scale_size(range = c(1, 11), 
               limits = c(0, 650),
               breaks = c(0.001, 65, 130, 195, 260, 325, 390, 455, 520, 585, 650),
               labels = c("0", "0-65", "65-130", "130-195", "195-260", "260-325",
                          "325-390", "390-455", "455-520", "520-585", "585-650"), 
               name = "Sediment Accumulated (g)") +
    ggtitle(m_title) +
    xlab("Stationing") +
    ylab("Elevation")
  return(final_plot)
  
  
}
```

```{r}
#test_func(ext1.1, 1.1, "Cross Section 1.1")
```

7.  **Publishing**:
    1.  Set up Quarto account (or link to github)
    2.  Open terminal
        1.  "quarto publish"
    3.  Provider: Quarto Pub
    4.  Publish with account: enter credentials
    5.  Re-authorize account (y/n): y
    6.  Authorize (y/n): y
    7.  Site Name: ""
